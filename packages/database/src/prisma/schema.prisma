// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
  binaryTargets   = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum OnboardingStep {
  WELCOME
  CHOOSE_STYLE
  INVITE
  READY
}

model User {
  id                     String                   @id @default(cuid())
  name                   String
  email                  String
  emailVerified          Boolean                  @default(false)
  image                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  timezone               String?
  onboardingStep         OnboardingStep           @default(WELCOME)
  onboarded              Boolean                  @default(false)
  defaultWorkspace       String? //slug of the user's default workspace
  statusEmoji            String?
  Session                Session[]
  Account                Account[]
  Workspace              Workspace[]
  WorkspaceMember        WorkspaceMember[]
  NotificationPreference NotificationPreference[]
  Space                  Space[]
  SpaceMember            SpaceMember[]
  Post                   Post[]                   @relation("AuthoredPosts")
  ResolvedPost           Post[]                   @relation("ResolvedBy")
  favorite               Favorite[]
  TimelineEvent          TimelineEvent[]
  comments               Comment[]                @relation("AuthoredComments")
  InviteTokens           InviteToken[]
  notifications          Notification[]
  actorNotifications     Notification[]           @relation("NotificationActor")

  @@unique([email])
  @@index(defaultWorkspace)
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model EarlyAccess {
  id            String   @id @default(cuid())
  name          String
  email         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isEarlyAccess Boolean  @default(false)

  @@unique([email])
  @@map("earlyAccess")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logo      String?
  createdBy String
  createdAt DateTime @default(now())

  creator         User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  WorkspaceMember WorkspaceMember[]
  Space           Space[]
  Post            Post[]
  InviteTokens    InviteToken[]
  notifications   Notification[]

  @@index([createdBy])
  @@map("workspace")
}

enum Role {
  ADMIN
  MEMBER
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
  @@map("workspaceMember")
}

model NotificationPreference {
  id                 String  @id @default(cuid())
  userId             String
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notificationPreference")
}

model Space {
  id          String   @id @default(cuid())
  name        String
  about       String?
  icon        String?
  identifier  String
  workspaceId String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  members   SpaceMember[]
  posts     Post[]
  favorite  Favorite[]

  @@unique([identifier, workspaceId])
  @@index([workspaceId])
  @@index([createdBy])
  @@map("space")
}

model SpaceMember {
  id      String   @id @default(cuid())
  spaceId String
  userId  String
  role    Role     @default(MEMBER)
  joined  DateTime @default(now())

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
  @@index([spaceId])
  @@index([userId])
  @@map("spaceMember")
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Post {
  id             String     @id @default(cuid())
  title          String
  content        String?
  authorId       String
  spaceId        String
  workspaceId    String
  status         PostStatus @default(PUBLISHED)
  publishedAt    DateTime?
  resolvedAt     DateTime?
  resolvedById   String?
  lastActivityAt DateTime   @default(now())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  pinned         Boolean    @default(false)
  archived       Boolean    @default(false)

  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  author         User            @relation("AuthoredPosts", fields: [authorId], references: [id], onDelete: Cascade)
  space          Space           @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  resolvedBy     User?           @relation("ResolvedBy", fields: [resolvedById], references: [id], onDelete: SetNull)
  favorite       Favorite[]
  timelineEvents TimelineEvent[]
  comments       Comment[]

  @@index([authorId])
  @@index([spaceId])
  @@index([resolvedById])
  @@index([workspaceId])
  @@map("post")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String? // For nested comments/replies
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  edited    Boolean  @default(false)

  author  User      @relation("AuthoredComments", fields: [authorId], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies Comment[] @relation("CommentReplies")

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
  @@index([createdAt])
  @@map("comment")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  spaceId   String?
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  space Space? @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, spaceId])
  @@index([userId])
  @@index([postId])
  @@index([spaceId])
  @@map("favorite")
}

enum TimelineAction {
  UPDATED_TITLE
  MOVED_SPACE
  RESOLVED
  REOPENED
  COMMENTED
}

model TimelineEvent {
  id        String  @id @default(cuid())
  actorId   String?
  actor     User?   @relation(fields: [actorId], references: [id])
  actorType String?

  subjectType String
  subjectId   String

  post Post? @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  referenceType String?
  referenceId   String?

  action   TimelineAction
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([action])
  @@index([actorType, actorId])
  @@index([subjectType, subjectId])
  @@index([subjectId])
  @@index([referenceType, referenceId])
  @@index([actorId])
  @@map("timelineEvent")
}

enum NotificationType {
  POST_COMMENT
  POST_MENTION
  POST_UPDATE
  POST_RESOLVED
  POST_REOPENED
  SPACE_INVITE
  WORKSPACE_INVITE
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean          @default(false)
  archived    Boolean          @default(false)
  actorId     String?
  subjectId   String?
  subjectType String?
  workspaceId String
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  actor     User?     @relation("NotificationActor", fields: [actorId], references: [id], onDelete: SetNull)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, read])
  @@index([workspaceId])
  @@index([actorId])
  @@index([subjectType, subjectId])
  @@map("notification")
}

model InviteToken {
  id          String   @id @default(cuid())
  token       String   @unique
  workspaceId String
  createdBy   String
  usesLeft    Int      @default(2)
  maxUses     Int      @default(2)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([createdBy])
  @@map("inviteToken")
}
