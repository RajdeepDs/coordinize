// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     String                   @id @default(cuid())
  name                   String
  email                  String
  emailVerified          Boolean                  @default(false)
  image                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  timezone               String?
  onboarded              Boolean                  @default(false)
  defaultWorkspace       String? //slug of the user's default workspace
  Session                Session[]
  Account                Account[]
  Workspace              Workspace[]
  WorkspaceMember        WorkspaceMember[]
  NotificationPreference NotificationPreference[]

  @@unique([email])
  @@index(defaultWorkspace)
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model EarlyAccess {
  id            String   @id @default(cuid())
  name          String
  email         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isEarlyAccess Boolean  @default(false)

  @@unique([email])
  @@map("earlyAccess")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logo      String?
  createdBy String
  createdAt DateTime @default(now())

  creator         User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  WorkspaceMember WorkspaceMember[]

  @@index([createdBy])
  @@map("workspace")
}

enum Role {
  ADMIN
  MEMBER
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
  @@map("workspaceMember")
}

model NotificationPreference {
  id                 String  @id @default(cuid())
  userId             String
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notificationPreference")
}
